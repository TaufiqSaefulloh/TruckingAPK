import 'dart:convert';
import 'dart:typed_data';
import 'dart:io'; 
import 'package:path_provider/path_provider.dart';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:tracking/welcome.dart';
import 'package:flutter_pdfview/flutter_pdfview.dart';

class Homepage extends StatefulWidget {
  @override
  _HomepageState createState() => _HomepageState();
}

class _HomepageState extends State<Homepage> {
  List<dynamic> _produkList = [];
  List<bool> _printedStatusList = [];

  Future<void> _fetchData() async {
    final response =
        await http.get(Uri.parse("https://fakestoreapi.com/products"));
    if (response.statusCode == 200) {
      setState(() {
        _produkList = json.decode(response.body);
        _printedStatusList =
            List.generate(_produkList.length, (index) => false);
      });
    } else {
      throw Exception('Failed to load data');
    }
  }

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  Future<String> _generatePdf(int index) async {
    final pdf = pw.Document();
    final font = await PdfGoogleFonts.nunitoExtraLight();

    pdf.addPage(
      pw.Page(
        build: (context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text('ID: ${_produkList[index]['id']}',
                  style: pw.TextStyle(font: font)),
              pw.Text('Title: ${_produkList[index]['title']}',
                  style: pw.TextStyle(font: font)),
            ],
          );
        },
      ),
    );

    final output = await getTemporaryDirectory();
    final outputFilePath = '${output.path}/${_produkList[index]['title']}.pdf';
    final file = File(outputFilePath);
    await file.writeAsBytes(await pdf.save());

    return outputFilePath;
  }

  void _printProdukInfo(int index) async {
    final String path = await _generatePdf(index);
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PDFScreen(path: path),
      ),
    );
    setState(() {
      _printedStatusList[index] = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Trucking'),
        actions: [
          IconButton(
            onPressed: () {
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(
                  builder: (context) => WelcomeScreen(),
                ),
              );
            },
            icon: Icon(Icons.logout),
          ),
        ],
      ),
      body: _produkList.isEmpty
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: _produkList.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('ID: ${_produkList[index]['id']}'),
                  subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Title: ${_produkList[index]['title']}'),
                      SizedBox(height: 8),
                      SizedBox(height: 8),
                      Container(
                        color: _printedStatusList[index]
                            ? Colors.green
                            : Colors.yellow,
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Text(
                            _printedStatusList[index]
                                ? 'Sudah Print'
                                : 'Belum Print',
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                      ),
                    ],
                  ),
                  trailing: _printedStatusList[index]
                      ? ElevatedButton(
                          onPressed: null,
                          child: Text('Printed'),
                          style:
                              ElevatedButton.styleFrom(primary: Colors.green),
                        )
                      : ElevatedButton(
                          onPressed: () {
                            _printProdukInfo(index);
                          },
                          child: Text('Print'),
                        ),
                );
              },
            ),
    );
  }
}

class PDFScreen extends StatelessWidget {
  final String path;

  PDFScreen({required this.path});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('PDF View')),
      body: PDFView(
        filePath: path,
        onViewCreated: (PDFViewController pdfViewController) {},
      ),
    );
  }
}


 
// Login



// ignore_for_file: use_build_context_synchronously, prefer_const_constructors

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart';
import 'package:tracking/TestPrint.dart';
import 'package:validators/validators.dart';

class loginScreen extends StatefulWidget {
  const loginScreen({Key? key}) : super(key: key);

  @override
  State<loginScreen> createState() => _loginScreenState();
}

class _loginScreenState extends State<loginScreen> {
  TextEditingController _emailController = TextEditingController();
  TextEditingController _passwordController = TextEditingController();

  bool isEmailCorrect = false;
  final _formKey = GlobalKey<FormState>();

  void _login(String email, password) async {
    final String apiUrl = 'http://localhost:8000/api/login';

    try {
      final response = await post(
        Uri.parse(apiUrl),
        body: {
          'email': email,
          'password': password,
        },
      );

      print('API Response: ${response.body}');

      final Map<String, dynamic> responseData = json.decode(response.body);

      if (response.statusCode == 200 && responseData['code'] == 200) {
        // If the login is successful, navigate to mainPage
        print('Login berhasil!');
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => HomePage()),
        );
      } else if (response.statusCode == 401) {
        // If the login fails due to invalid email or password
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Email atau kata sandi tidak valid. Silakan coba lagi.'),
          ),  
        );
      } else {
        // If there's an unexpected error or login failure, check the response for more details
        final String errorMessage = responseData['message'] ?? 'Login Gagal';
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMessage)),
        );
      }
    } catch (e) {
      // Handle exceptions
      print('Error: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Silahkan coba lagi!')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.blueAccent,
      body: Container(
        child: SafeArea(
          child: Center(
            child: SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    'Log In',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 30,
                      color: Colors.white,
                    ),
                  ),
                  Text(
                    'Silahkan login untuk memulai aplikasi',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 15,
                      color: Colors.white.withOpacity(0.5),
                    ),
                  ),
                  const SizedBox(
                    height: 30,
                  ),
                  Container(
                    height: isEmailCorrect ? 280 : 200,
                    width: MediaQuery.of(context).size.width / 1.1,
                    decoration: BoxDecoration(
                      // color: const Color.fromARGB(255, 101, 97, 97)
                      //     .withOpacity(0.3),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Column(
                      children: [
                        Padding(
                          padding: const EdgeInsets.only(
                            left: 20,
                            right: 20,
                            bottom: 20,
                            top: 20,
                          ),
                          child: TextFormField(
                            controller: _emailController,
                            onChanged: (val) {
                              setState(() {
                                isEmailCorrect = isEmail(val);
                              });
                            },
                            decoration: const InputDecoration(
                              focusedBorder: UnderlineInputBorder(
                                borderSide: BorderSide.none,
                                borderRadius:
                                    BorderRadius.all(Radius.circular(10)),
                              ),
                              enabledBorder: UnderlineInputBorder(
                                borderSide: BorderSide.none,
                                borderRadius:
                                    BorderRadius.all(Radius.circular(10)),
                              ),
                              prefixIcon: Icon(
                                Icons.person,
                                color: Color.fromARGB(255, 34, 73, 228),
                              ),
                              filled: true,
                              fillColor: Colors.white,
                              labelText: "Email",
                              hintText: 'your-email@domain.com',
                              labelStyle: TextStyle(
                                color: Color.fromARGB(255, 34, 73, 228),
                              ),
                            ),
                          ),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(left: 20, right: 20),
                          child: Form(
                            key: _formKey,
                            child: TextFormField(
                              obscuringCharacter: '*',
                              obscureText: true,
                              controller: _passwordController,
                              decoration: const InputDecoration(
                                focusedBorder: UnderlineInputBorder(
                                  borderSide: BorderSide.none,
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(10)),
                                ),
                                enabledBorder: UnderlineInputBorder(
                                  borderSide: BorderSide.none,
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(10)),
                                ),
                                prefixIcon: Icon(
                                  Icons.key,
                                  color: Color.fromARGB(255, 34, 73, 228),
                                ),
                                filled: true,
                                fillColor: Colors.white,
                                labelText: "Password",
                                hintText: '*********',
                                labelStyle: TextStyle(
                                  color: Color.fromARGB(255, 34, 73, 228),
                                ),
                              ),
                              validator: (value) {
                                if (value!.isEmpty || value.length < 5) {
                                  return 'Enter a valid password';
                                }
                                return null;
                              },
                            ),
                          ),
                        ),
                        SizedBox(
                          height: 20,
                        ),
                        isEmailCorrect
                            ? ElevatedButton(
                                style: ElevatedButton.styleFrom(
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                  ),
                                  backgroundColor: isEmailCorrect == false
                                      ? Colors.red
                                      : Colors.amber,
                                  padding: EdgeInsets.symmetric(
                                    horizontal: 131,
                                    vertical: 20,
                                  ),
                                ),
                                onPressed: () {
                                  if (_formKey.currentState!.validate()) {
                                    _login(
                                        _emailController.text,
                                        _passwordController
                                            .text); // Call the login function
                                  }
                                },
                                child: Text(
                                  'LOG IN',
                                  style: TextStyle(
                                      fontSize: 17,
                                      fontWeight: FontWeight.bold),
                                ),
                              )
                            : Container(),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}




// Test Print
// ignore_for_file: unused_import, unnecessary_null_comparison

import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:file_picker/file_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';


class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<dynamic> products = [];
  Map<int, bool> printedStatus = {};

  @override
  void initState() {
    super.initState();
    fetchProducts();
    loadPrintedStatus();
  }

  Future<void> fetchProducts() async {
    final response = await http.get(Uri.https('fakestoreapi.com', '/products'));
    if (response.statusCode == 200) {
      setState(() {
        products = jsonDecode(response.body);
      });
    } else {
      throw Exception('Failed to load data');
    }
  }

  Future<void> loadPrintedStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      printedStatus = Map<int, bool>.from(
          jsonDecode(prefs.getString('printedStatus') ?? '{}'));
    });
  }

  Future<void> savePrintedStatus() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('printedStatus', jsonEncode(printedStatus));
  }

  Future<void> printProduct(int id) async {
    final pdf = pw.Document();

    // Add content to the PDF
    final product = products.firstWhere((p) => p['id'] == id);
    pdf.addPage(
      pw.Page(
        build: (context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text('ID: ${product['id']}'),
              pw.Text('Title: ${product['title']}'),
              pw.SizedBox(height: 20),
            ],
          );
        },
      ),
    );

    // Save PDF and print
    final output = await Printing.layoutPdf(
      onLayout: (format) async => pdf.save(),
    );

    // Update printed status after printing is completed
    if (output != null) {
      setState(() {
        printedStatus[id] = true;
      });
      await savePrintedStatus();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Print success'),
          backgroundColor: Colors.green,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Print failed'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> printLocalPdf() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles(
      type: FileType.custom,
      allowedExtensions: ['pdf'],
    );

    if (result != null) {
      File file = File(result.files.single.path!);
      Printing.layoutPdf(onLayout: (_) async => await file.readAsBytes());
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Trucking'),
      ),
      body: products.isEmpty
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: products.length,
              itemBuilder: (context, index) {
                final product = products[index];
                final int id = product['id'];
                final String title = product['title'];

                return ListTile(
                  title: Text('ID: $id'),
                  subtitle: Text('Title: $title'),
                  trailing: printedStatus[id] == true
                      ? Icon(Icons.done, color: Colors.green)
                      : ElevatedButton(
                          onPressed: () async {
                            showDialog(
                              context: context,
                              builder: (BuildContext context) {
                                return AlertDialog(
                                  title: Text('Perhatian!'),
                                  content: Text(
                                      'Tombol print hanya berlaku satu kali setelah di klik, jika status berubah setelah di klik dan belum melakukan pencetakan segera hubungi admin'),
                                  actions: <Widget>[
                                    TextButton(
                                      onPressed: () {
                                        Navigator.of(context).pop();
                                      },
                                      child: Text('Cancel'),
                                    ),
                                    ElevatedButton(
                                      onPressed: () async {
                                        Navigator.of(context).pop();
                                        await printProduct(id);
                                      },
                                      child: Text('OK'),
                                    ),
                                  ],
                                );
                              },
                            );
                          },
                          child: Text('Print'),
                        ),
                );
              },
            ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: printLocalPdf,
        label: Text('Print Local PDF'),
        icon: Icon(Icons.add),
      ),
    );
  }
}
